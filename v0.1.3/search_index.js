var documenterSearchIndex = {"docs":
[{"location":"#Geometry2D.jl","page":"Geometry2D.jl","title":"Geometry2D.jl","text":"","category":"section"},{"location":"","page":"Geometry2D.jl","title":"Geometry2D.jl","text":"Basic shapes and related geometrical concepts come up frequently, this basic module defines structures and functions providing common calculations. This module is not attempting to be a 2D sketcher but rather provides clear, explicit, and verbose functions that improve users' maintainability and conceptual clarity.","category":"page"},{"location":"","page":"Geometry2D.jl","title":"Geometry2D.jl","text":"Included entities/concepts:","category":"page"},{"location":"","page":"Geometry2D.jl","title":"Geometry2D.jl","text":"Points\nTriangles\nCircles\nEllipses\nSpirals\nHomogeneous transforms","category":"page"},{"location":"","page":"Geometry2D.jl","title":"Geometry2D.jl","text":"Many more entities and functions are under consideration, pending need. Please open an enhancement issue to help us prioritize our efforts.","category":"page"},{"location":"#Installation","page":"Geometry2D.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"Geometry2D.jl","title":"Geometry2D.jl","text":"using Pkg\nPkg.add(url=\"https://github.com/mechanomy/Geometry2D.jl.git\")","category":"page"},{"location":"#Basic-Example","page":"Geometry2D.jl","title":"Basic Example","text":"","category":"section"},{"location":"","page":"Geometry2D.jl","title":"Geometry2D.jl","text":"using Unitful, Unitful.DefaultSymbols\nusing Plots\nusing Geometry2D\n\np = Point(1mm,2u\"inch\")\nplot(p, label=\"Point\", title=\"Basic Example\", aspect_ratio=:equal)\n\npa = Point(1mm,1u\"inch\")\nr = 50mm\nca = Circle(pa, r)\nplot!(ca, label=\"Circle A\")\n\ncb = Circle(5mm, 50mm, 20mm)\nplot!(cb, label=\"Circle B\")","category":"page"},{"location":"#API","page":"Geometry2D.jl","title":"API","text":"","category":"section"},{"location":"","page":"Geometry2D.jl","title":"Geometry2D.jl","text":"CurrentModule= Geometry2D","category":"page"},{"location":"","page":"Geometry2D.jl","title":"Geometry2D.jl","text":"Modules=[Geometry2D]","category":"page"},{"location":"#Geometry2D.Geometry2D","page":"Geometry2D.jl","title":"Geometry2D.Geometry2D","text":"Geometry2D models basic geometric shapes and common geometric formulae. This is a flat module with entities grouped into similar files under src.\n\nSee online documentation at https://mechanomy.github.io/Geometry2D.jl/dev/ and test for examples of each function.\n\n\n\n\n\n","category":"module"},{"location":"#Geometry2D.AngleOrReal","page":"Geometry2D.jl","title":"Geometry2D.AngleOrReal","text":"Type union accepting Angle or Real.\n\n\n\n\n\n","category":"type"},{"location":"#Geometry2D.LengthOrReal","page":"Geometry2D.jl","title":"Geometry2D.LengthOrReal","text":"Type union accepting Unitful.Length or Real.\n\n\n\n\n\n","category":"type"},{"location":"#Geometry2D.PitchOrReal","page":"Geometry2D.jl","title":"Geometry2D.PitchOrReal","text":"Type union accepting Pitch or Real.\n\n\n\n\n\n","category":"type"},{"location":"#Geometry2D.ui","page":"Geometry2D.jl","title":"Geometry2D.ui","text":"Convenience unit vector in the x direction.\n\n\n\n\n\n","category":"constant"},{"location":"#Geometry2D.uj","page":"Geometry2D.jl","title":"Geometry2D.uj","text":"Convenience unit vector in the y direction.\n\n\n\n\n\n","category":"constant"},{"location":"#Geometry2D.uk","page":"Geometry2D.jl","title":"Geometry2D.uk","text":"Convenience unit vector in the z direction.\n\n\n\n\n\n","category":"constant"},{"location":"#Geometry2D.Circle","page":"Geometry2D.jl","title":"Geometry2D.Circle","text":"A circle having a center::Point and a radius::Unitful.Length.\n\n\n\n\n\n","category":"type"},{"location":"#Geometry2D.Circle-Tuple{Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"Geometry2D.Circle","text":"Circle( x::Unitful.Length, y::Unitful.Length, r::Unitful.Length )\n\nA circle having a center at x::Unitful.Length and y::Unitful.Length with radius::Unitful.Length.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.Delta","page":"Geometry2D.jl","title":"Geometry2D.Delta","text":"A difference between two points on the cartesian plane, measured in dx and dy from the plane's origin. This is introduced as a separate type to avoid using Vector{}s with inexplicit length.\n\n\n\n\n\n","category":"type"},{"location":"#Geometry2D.Point","page":"Geometry2D.jl","title":"Geometry2D.Point","text":"A point on the cartesian plane, measured in x and y from the plane's origin.\n\n\n\n\n\n","category":"type"},{"location":"#Geometry2D.Spiral","page":"Geometry2D.jl","title":"Geometry2D.Spiral","text":"Describes a spiral progressing from a0,r0 to a1,r1.  If thickness is not specified it is calculated such that each layer touches neighbors, a tightly wound spiral, if it is specified then an open spiral is modeled.\n\na0::AngleOrReal ‚Äì start angle\na1::AngleOrReal ‚Äì stop angle\nr0::LengthOrReal ‚Äì start radius\nr1::LengthOrReal ‚Äì stop radius\npitch::PitchOrReal ‚Äì pitch\n\n\n\n\n\n","category":"type"},{"location":"#Geometry2D.Spiral-Tuple{Union{Real, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}, Union{Real, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}, Union{Real, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}, Union{Real, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}}","page":"Geometry2D.jl","title":"Geometry2D.Spiral","text":"Spiral( a0::AngleOrReal, a1::AngleOrReal, r0::LengthOrReal, r1::LengthOrReal ) Create a Spiral, calculating the pitch from a0, a1, r0, and r1.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.UnitVector","page":"Geometry2D.jl","title":"Geometry2D.UnitVector","text":"A UnitVector type is unitless, expressing only relative magnitude. It has fields x, y, and z\n\nx\nComponent in the x direction.\ny\nComponent in the y direction.\nz\nComponent in the z direction.\n\n\n\n\n\n","category":"type"},{"location":"#Geometry2D.UnitVector-Tuple{AbstractVector{T} where T}","page":"Geometry2D.jl","title":"Geometry2D.UnitVector","text":"UnitVector(vec::AbstractVector)\n\nGiven some subtype of AbstractVector, return a UnitVector.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.UnitVector2D","page":"Geometry2D.jl","title":"Geometry2D.UnitVector2D","text":"A UnitVector2D type is unitless, expressing only relative magnitude. It has fields x and y.\n\n\n\n\n\n","category":"type"},{"location":"#Geometry2D.UnitVector2D-Tuple{Delta}","page":"Geometry2D.jl","title":"Geometry2D.UnitVector2D","text":"UnitVector2D(dl::Delta)\n\nConstructs a UnitVector2D in the direction of dl.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.Vector2D","page":"Geometry2D.jl","title":"Geometry2D.Vector2D","text":"A 2D vector from origin to tip. Functions are provided to convert from the struct's cartesian format to polar.\n\norigin\nthe origin Point\ntip\nthe tip Point\n\n\n\n\n\n","category":"type"},{"location":"#Base.:*-Tuple{Point, Real}","page":"Geometry2D.jl","title":"Base.:*","text":"(*)(p::Point, f::Real) :: Point\n\nMultiplies p by the given factor f.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:+-Tuple{Point, Delta}","page":"Geometry2D.jl","title":"Base.:+","text":"(+)(p::Point, d::Delta) :: Point\n\nAdds a d Delta to Point p.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:--Tuple{Point, Delta}","page":"Geometry2D.jl","title":"Base.:-","text":"(-)(p::Point, d::Delta) :: Point\n\nSubtracts a Delta d from the Point p.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:--Tuple{Point, Point}","page":"Geometry2D.jl","title":"Base.:-","text":"(-)(a::Point, b::Point) :: Delta\n\nFinds the Delta between Points a and b.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:--Tuple{UnitVector}","page":"Geometry2D.jl","title":"Base.:-","text":"(-)(a::Real, uv::UnitVector) :: UnitVector\n\nProvides negation of UnitVectors.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:/-Tuple{Delta, Real}","page":"Geometry2D.jl","title":"Base.:/","text":"(/)(d::Delta, f::Real) :: Delta\n\nDivides d by the given factor f.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:/-Tuple{Point, Real}","page":"Geometry2D.jl","title":"Base.:/","text":"(/)(p::Point, f::Real) :: Point\n\nDivides p by the given factor f.\n\n\n\n\n\n","category":"method"},{"location":"#Base.angle-Tuple{Delta}","page":"Geometry2D.jl","title":"Base.angle","text":"angle(d::Delta) :: Real\n\nCalculate the angle of Delta d relative to global x = horizontal.\n\n\n\n\n\n","category":"method"},{"location":"#Base.angle-Tuple{Vector2D}","page":"Geometry2D.jl","title":"Base.angle","text":"angle(v::Vector2D) :: Angle\nangled(v::Vector2D) :: typeof(1.0u\"¬∞\")\n\nCalculate the angle of Vector2D v relative to global x = horizontal, via atan().\n\n\n\n\n\n","category":"method"},{"location":"#Base.isapprox-Tuple{Delta, Delta}","page":"Geometry2D.jl","title":"Base.isapprox","text":"isapprox(a::Delta, b::Delta; atol=0, rtol=‚àöeps()) :: Bool\n\nApproximately compare Deltas a and b via absolute tolerance atol and relative tolerance rtol, as in isapprox.\n\n\n\n\n\n","category":"method"},{"location":"#Base.isapprox-Tuple{Point, Point}","page":"Geometry2D.jl","title":"Base.isapprox","text":"isapprox(p::Point, q::Point; atol=0, rtol=‚àöeps()) :: Bool\n\nApproximately compare Points p and q via absolute tolerance atol and relative tolerance rtol, as in isapprox.\n\n\n\n\n\n","category":"method"},{"location":"#Base.isapprox-Tuple{UnitVector, UnitVector}","page":"Geometry2D.jl","title":"Base.isapprox","text":"isapprox(a::UnitVector, b::UnitVector; atol=0, rtol=‚àöeps()) :: Bool\n\nApproximately compare UnitVectors a to b via absolute tolerance atol and relative tolerance rtol, as in isapprox.\n\n\n\n\n\n","category":"method"},{"location":"#Base.isapprox-Tuple{UnitVector2D, UnitVector2D}","page":"Geometry2D.jl","title":"Base.isapprox","text":"isapprox(a::UnitVector2D, b::UnitVector2D; atol=0, rtol=‚àöeps()) :: Bool\n\nApproximately compare UnitVector2Ds a and b via absolute tolerance atol and relative tolerance rtol, as in isapprox.\n\n\n\n\n\n","category":"method"},{"location":"#Base.isapprox-Tuple{Vector2D, Vector2D}","page":"Geometry2D.jl","title":"Base.isapprox","text":"isapprox(a::Vector2D, b::Vector2D; atol=0, rtol=‚àöeps()) :: Bool\n\nApproximately compare Vector2Ds a to b via absolute tolerance atol and relative tolerance rtol, as in isapprox.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.Rz-Tuple{Point, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}","page":"Geometry2D.jl","title":"Geometry2D.Rz","text":"Rz(p::Point, a::Angle)\n\nRotate p in the plane an angle a.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.Rz-Tuple{Real}","page":"Geometry2D.jl","title":"Geometry2D.Rz","text":"Rz(angle::Real)\n\nCreate a 2D rotation matrix effecting a rotation of angle. Homogeneous transformation matrices are multiplicative and therefore should be unitless.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.Rz-Tuple{Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}","page":"Geometry2D.jl","title":"Geometry2D.Rz","text":"Rz(angle::Angle)\n\nCreate a 2D rotation matrix effecting a rotation of angle. Homogeneous transformation matrices are multiplicative and therefore should be unitless.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.Tx-Tuple{Point, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"Geometry2D.Tx","text":"Tx(p::Point, d::Unitful.Length)\n\nTranslate p a distance of d in the X direction. Homogeneous transformation matrices are multiplicative and therefore should be unitless.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.Tx-Tuple{Real}","page":"Geometry2D.jl","title":"Geometry2D.Tx","text":"Tx(a::Real) Create a 2D translation matrix translating along local X an angle a. Homogeneous transformation matrices are multiplicative and therefore should be unitless.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.Ty-Tuple{Point, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"Geometry2D.Ty","text":"Ty(p::Point, d::Unitful.Length)\n\nTranslate p a distance of d in the X direction. Homogeneous transformation matrices are multiplicative and therefore should be unitless.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.Ty-Tuple{Real}","page":"Geometry2D.jl","title":"Geometry2D.Ty","text":"Ty(b::Real) Create a 2D translation matrix translating along local Y by b. Homogeneous transformation matrices are multiplicative and therefore should be unitless.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.angleAdjacent2Opposite-Tuple{Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"Geometry2D.angleAdjacent2Opposite","text":"angleAdjacent2Opposite(angle::Angle, adjacent::Unitful.Length) :: Unitful.Length\nangleAdjacent2Opposite(angle::Angle, adjacent::Unitful.Length) :: Unitful.Length\n\nFor a right triangle, find the length of the 'opposite' leg, given angle and adjacent.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.angleOpposite2Adjacent-Tuple{Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"Geometry2D.angleOpposite2Adjacent","text":"angleOpposite2Adjacent(angle::Angle, opposite::Unitful.Length) :: Unitful.Length\nangleOpposite2Adjacent(; angle::Angle, opposite::Unitful.Length) :: Unitful.Length\n\nFor a right triangle, find the length of the 'adjacent' leg, given angle and opposite.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.angleWrap-Tuple{Real}","page":"Geometry2D.jl","title":"Geometry2D.angleWrap","text":"angleWrap(angle::Real) :: Real\n\nWraps angle between 0 and 2œÄ.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.angleWrap-Tuple{Union{Unitful.Quantity{T, NoDims, U}, Unitful.Level{L, S, Unitful.Quantity{T, NoDims, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"Geometry2D.angleWrap","text":"angleWrap(angle::Radian) :: Radian\n\nWraps angle between 0 and 2œÄ.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.calcLength-Tuple{Union{Real, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}, Union{Real, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}, Union{Real, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}, Union{Real, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}}","page":"Geometry2D.jl","title":"Geometry2D.calcLength","text":"calcLength(a0::AngleOrReal, a1::AngleOrReal, r0::LengthOrReal, r1::LengthOrReal)\ncalcLength(;a0::AngleOrReal, a1::AngleOrReal, r0::LengthOrReal, r1::LengthOrReal)\ncalcLength(s::Spiral)\n\nLength along the spiral, as if it were unrolled.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.calcPitch-Tuple{Union{Real, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}, Union{Real, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}, Union{Real, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}, Union{Real, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}}","page":"Geometry2D.jl","title":"Geometry2D.calcPitch","text":"calcPitch(a0::AngleOrReal, a1::AngleOrReal, r0::LengthOrReal, r1::LengthOrReal)\ncalcPitch(; a0::AngleOrReal, a1::AngleOrReal, r0::LengthOrReal, r1::LengthOrReal)\ncalcPitch(s::Spiral)\n\nCalculate a spiral's pitch from (r1-r0)/(a1-a0). The nominal units of Pitch defined to be [m/rev], but this will return Real if the arguments or Spiral are that, or a Pitch,m/rad,m/deg depending on __. \n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.circleArcLength-Tuple{Circle, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}","page":"Geometry2D.jl","title":"Geometry2D.circleArcLength","text":"circleArcLength( circle::Circle, angle::Angle )\n\nCompute the circlular arc length of circle over angle.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.circleArcLength-Tuple{Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}","page":"Geometry2D.jl","title":"Geometry2D.circleArcLength","text":"circleArcLength( radius::Unitful.Length, angle::Angle )\n\nCompute the circlular arc length at radius over angle.\n\nangle = 20u\"¬∞\" \nradius = 5u\"mm\"\nlen = circleArcLength(angle, radius)\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.circleArea-Tuple{Circle}","page":"Geometry2D.jl","title":"Geometry2D.circleArea","text":"circleArea(c::Circle) :: Unitful.Area\n\nCalculate the area of a circle with radius r.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.circleArea-Tuple{Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"Geometry2D.circleArea","text":"circleArea(r::Unitful.Length) :: Unitful.Area\n\nCalculate the area of a circle with radius r.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.circumference-Tuple{Circle}","page":"Geometry2D.jl","title":"Geometry2D.circumference","text":"circumference( circle::Circle )\n\nCalculate the circumeference of circle.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.circumference-Tuple{Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"Geometry2D.circumference","text":"circumference( r::Unitful.Length ) :: Unitful.Length\n\nCalculate the circumeference of circle.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.delta-Tuple{Vector2D}","page":"Geometry2D.jl","title":"Geometry2D.delta","text":"delta(v::Vector2D) :: Delta\n\nGiven v, return the difference in x and y as a Delta from v's tip to origin.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.distance-Tuple{Point, Point}","page":"Geometry2D.jl","title":"Geometry2D.distance","text":"distance(a::Point, b::Point ) :: Unitful.Length\n\nFinds the straight-line distance between a and b. (It is nonsensical to ask for the 'distance' of a Delta, rather Deltas have norm().)\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.ellipticArcLength-NTuple{4, Number}","page":"Geometry2D.jl","title":"Geometry2D.ellipticArcLength","text":"ellipticArcLength(a::Number, b::Number, start::Number, stop::Number)\n\nCalculates the arc length of an ellipse from major axis a towards minor axis b between start and stop angles, as measured from the major axis a.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.ellipticArcLength-Tuple{Number, Number, Number}","page":"Geometry2D.jl","title":"Geometry2D.ellipticArcLength","text":"ellipticArcLength(a::Number, b::Number, angle::Number ) :: Number\n\nCalculates the arc length of an ellipse from major axis a towards minor axis b through angle, measured from a, via elliptic integral: L = b * elliptic_e( atan(a/b*tan(angle)), 1-a^2/b^2 )\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.ellipticArcLength-Tuple{Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}","page":"Geometry2D.jl","title":"Geometry2D.ellipticArcLength","text":"ellipticArcLength(a::Unitful.Length, b::Unitful.Length, angle::Angle)\n\nUnitful version. Calculates the arc length of an ellipse from major axis a towards minor axis b through angle, measured from major axis a, via elliptic integral:. L = b * elliptic_e( atan(a/b*tan(angle)), 1-a^2/b^2 )\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.hvec2point-Tuple{Vector{var\"#s43\"} where var\"#s43\"<:(Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U})}","page":"Geometry2D.jl","title":"Geometry2D.hvec2point","text":"hvec2point(v::Vector{<:Unitful.Length}) :: Point\n\nConvert a 1-terminated vector back into a Point.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.isClockwise-Tuple{Spiral}","page":"Geometry2D.jl","title":"Geometry2D.isClockwise","text":"isClockwise(s::Spiral) :: Bool\n\nConversely, clockwise implies decreasing angle.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.isCounterClockwise-Tuple{Spiral}","page":"Geometry2D.jl","title":"Geometry2D.isCounterClockwise","text":"isCounterClockwise(s::Spiral) :: Bool\n\n2D Spirals are 'counterclockwise' if of increasing angle, a0 to a1.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.isDecreasing-Tuple{Spiral}","page":"Geometry2D.jl","title":"Geometry2D.isDecreasing","text":"isDecreasing(s::Spiral) :: Bool\n\nDoes the radius decrease\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.isIncreasing-Tuple{Spiral}","page":"Geometry2D.jl","title":"Geometry2D.isIncreasing","text":"isIncreasing(s::Spiral) :: Bool\n\nDoes the radius increase?\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.isSegmentMutuallyTangent-Tuple{}","page":"Geometry2D.jl","title":"Geometry2D.isSegmentMutuallyTangent","text":"isSegmentMutuallyTangent(; cA::Circle, cB::Circle, thA::Radian, thB::Radian, tol::Number=1e-3) :: Bool\n\nGiven Circles circleA and circleB, tests whether the points on their edges at angles thA and thB define a line segment that is tangent to both circles. tol is the tolerance on the tangency criterion.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.isSegmentPerpendicularToParallelVectors","page":"Geometry2D.jl","title":"Geometry2D.isSegmentPerpendicularToParallelVectors","text":"isSegmentPerpendicularToParallelVectors( vA::Vector2D, vB::Vector2D, tol::Number=1e-3) :: Bool\n\nTests whether a segment connecting the tips of vA and vB is perpendicular to both, which implies parallelity of vA and vB. The calculation compares the direction of the cross products of vA and the tip-connecting segment, and vB and the segment, that these are within tol of each other.\n\n\n\n\n\n","category":"function"},{"location":"#Geometry2D.lawOfCosines-Tuple{Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}","page":"Geometry2D.jl","title":"Geometry2D.lawOfCosines","text":"lawOfCosines(legA::Unitful.Length, legB::Unitful.Length, angleAB::Angle) :: Unitful.Length\nlawOfCosines(legA::Unitful.Length, legB::Unitful.Length, angleAB::Angle) :: Unitful.Length\n\nFor any triangle, finds the length of the unknown legC from legA, legB, and angleAB between them.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.lawOfSines-Tuple{Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}","page":"Geometry2D.jl","title":"Geometry2D.lawOfSines","text":"lawOfSines(legA::Unitful.Length, angleBC::Angle, angleCA::Angle) :: Unitful.Length\nlawOfSines(; legA::Unitful.Length, angleBC::Angle, angleCA::Angle) :: Unitful.Length\n\nFor any triangle with legs A, B, C and angles AB, BC, CA, so that legA is the open side of angleBC, finds legB corresponding to angleCA.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.legHypotenuse2Leg-Tuple{Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"Geometry2D.legHypotenuse2Leg","text":"legHypotenuse2Leg( leg::Unitful.Length, hyp::Unitful.Length  ) :: Unitful.Length\nlegHypotenuse2Leg(; leg::Unitful.Length, hyp::Unitful.Length  ) :: Unitful.Length\n\nFor a right triangle, find the length of the third leg from hypotenuse hyp and leg.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.legLeg2Hypotenuse-Tuple{Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"Geometry2D.legLeg2Hypotenuse","text":"legLeg2Hypotenuse( a::Unitful.Length, b::Unitful.Length ) :: Unitful.Length\nlegLeg2Hypotenuse(; a::Unitful.Length, b::Unitful.Length ) :: Unitful.Length\n\nFor a right triangle, find the length of the hypotenuse from the shorter legs a and b.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.normalize-Tuple{Delta}","page":"Geometry2D.jl","title":"Geometry2D.normalize","text":"normalize( d::Delta ) :: UnitVector2D\n\nReturn a UnitVector2D for Delta d.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.normalize-Tuple{Point}","page":"Geometry2D.jl","title":"Geometry2D.normalize","text":"normalize( p::Point ) :: UnitVector2D\n\nReturn a UnitVector2D pointing toward Point p.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.point2hvec-Tuple{Point}","page":"Geometry2D.jl","title":"Geometry2D.point2hvec","text":"point2hvec(p::Point)\n\nConvert p into a 1-terminated Vector for multiplication with some homogeneous transformation matrix.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.pointOnCircle-Tuple{Circle, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}","page":"Geometry2D.jl","title":"Geometry2D.pointOnCircle","text":"pointOnCircle( c::Circle, a::Angle ) :: Point\n\nReturns the Point on c at angle a measured from +x.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.radialVector-Tuple{Circle, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}","page":"Geometry2D.jl","title":"Geometry2D.radialVector","text":"radialVector( c::Circle, a::Angle ) :: Vector2D\n\nReturns a Vector2D with origin at c.center and tip at angle a and c.radius.\n\n\n\n\n\n","category":"method"},{"location":"#Geometry2D.seriesCartesian","page":"Geometry2D.jl","title":"Geometry2D.seriesCartesian","text":"seriesCartesian(s::Spiral, n::Int=1000)\nseriesCartesian(; s::Spiral, n::Int=1000)\n\nSpread n points over spiral s, returning an (xs,ys) tuple\n\n\n\n\n\n","category":"function"},{"location":"#Geometry2D.seriesPolar","page":"Geometry2D.jl","title":"Geometry2D.seriesPolar","text":"seriesPolar(s::Spiral, n::Int=1000)\nseriesPolar(; s::Spiral, n::Int=1000)\n\nSpread n points over spiral s, returning an (angles,radii) tuple.\n\n\n\n\n\n","category":"function"},{"location":"#Geometry2D.toVector-Tuple{UnitVector}","page":"Geometry2D.jl","title":"Geometry2D.toVector","text":"toVector( uv::UnitVector ) :: AbstractVector\n\nConvert uv to a Base.Vector.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#11#T\"}, Tuple{NamedTuple{(:x, :y), var\"#11#T\"}, Type{Point}}} where var\"#11#T\"<:Tuple{Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"KeywordDispatch.kwcall","text":"Point(;x::Unitful.Length, y::Unitful.Length)\n\nKeyword constructor for a point on the cartesian plane, measured in x and y from the plane's origin.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#28#T\"}, Tuple{NamedTuple{(:x, :y), var\"#28#T\"}, Type{UnitVector2D}}} where var\"#28#T\"<:Tuple{Real, Real}","page":"Geometry2D.jl","title":"KeywordDispatch.kwcall","text":"UnitVector2D(; x::Real, y::Real)\n\nKeyword constructor.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#35#T\"}, Tuple{NamedTuple{(:origin, :tip), var\"#35#T\"}, Type{Vector2D}}} where var\"#35#T\"<:Tuple{Point, Point}","page":"Geometry2D.jl","title":"KeywordDispatch.kwcall","text":"Vector2D(;origin::Point, tip::Point)\n\nKeyword constructor for a vector from origin to tip.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#42#T\"}, Tuple{NamedTuple{(:center, :radius), var\"#42#T\"}, Type{Circle}}} where var\"#42#T\"<:Tuple{Point, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"KeywordDispatch.kwcall","text":"Circle(; center::Point, radius::Unitful.Length )\n\nA circle having a center::Point and a radius::Unitful.Length.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#51#T\"}, Tuple{NamedTuple{(:x, :y, :z), var\"#51#T\"}, Type{UnitVector}}} where var\"#51#T\"<:Tuple{Real, Real, Real}","page":"Geometry2D.jl","title":"KeywordDispatch.kwcall","text":"UnitVector(; x::Real, y::Real, z::Real)\n\nA keyword constructor of UnitVectors.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#60#T\"}, Tuple{NamedTuple{(:a0, :a1, :pitch, :r0, :r1), var\"#60#T\"}, Type{Spiral}}} where var\"#60#T\"<:Tuple{Union{Real, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}, Union{Real, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T}, Union{Real, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}, Union{Real, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}, Union{Real, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}}","page":"Geometry2D.jl","title":"KeywordDispatch.kwcall","text":"Spiral(; a0::AngleOrReal, a1::AngleOrReal, r0::LengthOrReal, r1::LengthOrReal, pitch::PitchOrReal) = Spiral(a0, a1, r0, r1, pitch)\n\nKeyword create a Spiral with a0, a1, r0, r1, and pitch.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#62#T\"}, Tuple{NamedTuple{(:a0, :a1, :r0, :r1), var\"#62#T\"}, Type{Spiral}}} where var\"#62#T\"<:Tuple{Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T, Union{Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(rad,), NoDims, nothing}}, Unitful.Quantity{T, NoDims, Unitful.FreeUnits{(¬∞,), NoDims, nothing}}} where T, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, ùêã, U}, Unitful.Level{L, S, Unitful.Quantity{T, ùêã, U}} where {L, S}} where {T, U}}","page":"Geometry2D.jl","title":"KeywordDispatch.kwcall","text":"Spiral( a0::AngleOrReal, a1::AngleOrReal, r0::LengthOrReal, r1::LengthOrReal )\n\nKeyword create a Spiral, calculating the pitch from a0, a1, r0, and r1.\n\n\n\n\n\n","category":"method"},{"location":"#KeywordDispatch.kwcall-Union{Tuple{var\"#64#T\"}, Tuple{NamedTuple{(:a0, :a1, :r0, :r1), var\"#64#T\"}, Type{Spiral}}} where var\"#64#T\"<:NTuple{4, Real}","page":"Geometry2D.jl","title":"KeywordDispatch.kwcall","text":"Spiral(; a0::Real, a1::Real, r0::Real, r1::Real) = Spiral(a0, a1, r0, r1, calcPitch(a0,a1,r0,r1)::Real )\n\nKeyword create a Spiral, calculating the pitch from a0[rad], a1[rad], r0, and r1.\n\n\n\n\n\n","category":"method"},{"location":"#LinearAlgebra.norm-Tuple{Delta}","page":"Geometry2D.jl","title":"LinearAlgebra.norm","text":"norm( d::Delta; p=2 ) :: Unitful.Length\n\nReturns the p-norm of d.\n\n\n\n\n\n","category":"method"},{"location":"#LinearAlgebra.norm-Tuple{Point}","page":"Geometry2D.jl","title":"LinearAlgebra.norm","text":"norm( pt::Point; p=2 ) :: Unitful.Length\n\nReturns the p-norm of pt.\n\n\n\n\n\n","category":"method"},{"location":"#LinearAlgebra.norm-Tuple{UnitVector2D}","page":"Geometry2D.jl","title":"LinearAlgebra.norm","text":"norm( u::UnitVector2D; p=2 ) :: Real\n\nReturns the p-norm of u.\n\n\n\n\n\n","category":"method"},{"location":"#LinearAlgebra.norm-Tuple{UnitVector}","page":"Geometry2D.jl","title":"LinearAlgebra.norm","text":"norm( uv::UnitVector; p=2 ) :: Real\n\nReturns the UnitVector's 2-norm, which should always be 1.\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, Circle}","page":"Geometry2D.jl","title":"RecipesBase.apply_recipe","text":"A plot recipe for plotting Circles under Plots.jl.\n\nc = Circle( 3mm,4mm, 5mm )\nplot(c) #plot(c, linecolor=:red, ...kwArgs... )\n\n\n\n\n\n","category":"method"},{"location":"#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, Point}","page":"Geometry2D.jl","title":"RecipesBase.apply_recipe","text":"A plot recipe for plotting Points under Plots.jl.\n\np = Point( 3mm,4mm )\nplot(p)\n\n\n\n\n\n","category":"method"}]
}
